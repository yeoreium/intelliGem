import { JSONSchemaType } from "ajv";
import { DeclarativeAgentManifestV1D0 } from "./copilot/declarative-agent/DeclarativeAgentManifestV1D0";
import { DeclarativeAgentManifestV1D2 } from "./copilot/declarative-agent/DeclarativeAgentManifestV1D2";
import { DeclarativeAgentManifestV1D3 } from "./copilot/declarative-agent/DeclarativeAgentManifestV1D3";
import { DeclarativeAgentManifestV1D4 } from "./copilot/declarative-agent/DeclarativeAgentManifestV1D4";
import { APIPluginManifestV2D1 } from "./copilot/plugin/ApiPluginManifestV2D1";
import { APIPluginManifestV2D2 } from "./copilot/plugin/ApiPluginManifestV2D2";
import { APIPluginManifestV2D3 } from "./copilot/plugin/ApiPluginManifestV2D3";
import { TeamsManifestV1D0 } from "./teams/TeamsManifestV1D0";
import { TeamsManifestV1D1 } from "./teams/TeamsManifestV1D1";
import { TeamsManifestV1D10 } from "./teams/TeamsManifestV1D10";
import { TeamsManifestV1D11 } from "./teams/TeamsManifestV1D11";
import { TeamsManifestV1D12 } from "./teams/TeamsManifestV1D12";
import { TeamsManifestV1D13 } from "./teams/TeamsManifestV1D13";
import { TeamsManifestV1D14 } from "./teams/TeamsManifestV1D14";
import { TeamsManifestV1D15 } from "./teams/TeamsManifestV1D15";
import { TeamsManifestV1D16 } from "./teams/TeamsManifestV1D16";
import { TeamsManifestV1D17 } from "./teams/TeamsManifestV1D17";
import { TeamsManifestV1D19 } from "./teams/TeamsManifestV1D19";
import { TeamsManifestV1D2 } from "./teams/TeamsManifestV1D2";
import { TeamsManifestV1D20 } from "./teams/TeamsManifestV1D20";
import { TeamsManifestV1D21 } from "./teams/TeamsManifestV1D21";
import { TeamsManifestV1D3 } from "./teams/TeamsManifestV1D3";
import { TeamsManifestV1D4 } from "./teams/TeamsManifestV1D4";
import { TeamsManifestV1D5 } from "./teams/TeamsManifestV1D5";
import { TeamsManifestV1D6 } from "./teams/TeamsManifestV1D6";
import { TeamsManifestV1D7 } from "./teams/TeamsManifestV1D7";
import { TeamsManifestV1D8 } from "./teams/TeamsManifestV1D8";
import { TeamsManifestV1D9 } from "./teams/TeamsManifestV1D9";
import { TeamsManifestVDevPreview } from "./teams/TeamsManifestVDevPreview";
export { TeamsManifestV1D1, Convert as TeamsManifestV1D1Convert } from "./teams/TeamsManifestV1D1";
export { TeamsManifestV1D10, Convert as TeamsManifestV1D10Convert, } from "./teams/TeamsManifestV1D10";
export { TeamsManifestV1D11, Convert as TeamsManifestV1D11Convert, } from "./teams/TeamsManifestV1D11";
export { TeamsManifestV1D12, Convert as TeamsManifestV1D12Convert, } from "./teams/TeamsManifestV1D12";
export { TeamsManifestV1D13, Convert as TeamsManifestV1D13Convert, } from "./teams/TeamsManifestV1D13";
export { TeamsManifestV1D14, Convert as TeamsManifestV1D14Convert, } from "./teams/TeamsManifestV1D14";
export { TeamsManifestV1D15, Convert as TeamsManifestV1D15Convert, } from "./teams/TeamsManifestV1D15";
export { TeamsManifestV1D16, Convert as TeamsManifestV1D16Convert, } from "./teams/TeamsManifestV1D16";
export { TeamsManifestV1D17, Convert as TeamsManifestV1D17Convert, } from "./teams/TeamsManifestV1D17";
export { TeamsManifestV1D19, Convert as TeamsManifestV1D19Convert, } from "./teams/TeamsManifestV1D19";
export { TeamsManifestV1D2, Convert as TeamsManifestV1D2Convert } from "./teams/TeamsManifestV1D2";
export { TeamsManifestV1D20, Convert as TeamsManifestV1D20Convert, } from "./teams/TeamsManifestV1D20";
export { TeamsManifestV1D21, Convert as TeamsManifestV1D21Convert, } from "./teams/TeamsManifestV1D21";
export { TeamsManifestV1D3, Convert as TeamsManifestV1D3Convert } from "./teams/TeamsManifestV1D3";
export { TeamsManifestV1D4, Convert as TeamsManifestV1D4Convert } from "./teams/TeamsManifestV1D4";
export { TeamsManifestV1D5, Convert as TeamsManifestV1D5Convert } from "./teams/TeamsManifestV1D5";
export { TeamsManifestV1D6, Convert as TeamsManifestV1D6Convert } from "./teams/TeamsManifestV1D6";
export { TeamsManifestV1D7, Convert as TeamsManifestV1D7Convert } from "./teams/TeamsManifestV1D7";
export { TeamsManifestV1D8, Convert as TeamsManifestV1D8Convert } from "./teams/TeamsManifestV1D8";
export { TeamsManifestV1D9, Convert as TeamsManifestV1D9Convert } from "./teams/TeamsManifestV1D9";
export { TeamsManifestVDevPreview as DevPreviewSchema, TeamsManifestVDevPreview, Convert as TeamsManifestVDevPreviewConvert, } from "./teams/TeamsManifestVDevPreview";
export type TeamsManifest = (TeamsManifestV1D0 & {
    manifestVersion: "1.0";
    $schema?: string;
}) | (TeamsManifestV1D1 & {
    manifestVersion: "1.1";
}) | (TeamsManifestV1D2 & {
    manifestVersion: "1.2";
}) | (TeamsManifestV1D3 & {
    manifestVersion: "1.3";
}) | (TeamsManifestV1D4 & {
    manifestVersion: "1.4";
}) | TeamsManifestV1D5 | TeamsManifestV1D6 | TeamsManifestV1D7 | TeamsManifestV1D8 | TeamsManifestV1D9 | TeamsManifestV1D10 | TeamsManifestV1D11 | TeamsManifestV1D12 | TeamsManifestV1D13 | TeamsManifestV1D14 | TeamsManifestV1D15 | TeamsManifestV1D16 | TeamsManifestV1D17 | TeamsManifestV1D19 | TeamsManifestV1D20 | TeamsManifestV1D21 | TeamsManifestVDevPreview;
export type TeamsManifestLatest = TeamsManifestV1D21;
export { DeclarativeAgentManifestV1D0, Convert as DeclarativeAgentManifestV1D0Convert, } from "./copilot/declarative-agent/DeclarativeAgentManifestV1D0";
export { DeclarativeAgentManifestV1D2, Convert as DeclarativeAgentManifestV1D2Convert, } from "./copilot/declarative-agent/DeclarativeAgentManifestV1D2";
export { DeclarativeAgentManifestV1D3, Convert as DeclarativeAgentManifestV1D3Convert, } from "./copilot/declarative-agent/DeclarativeAgentManifestV1D3";
export { DeclarativeAgentManifestV1D4, SensitivityLabel, Convert as DeclarativeAgentManifestV1D4Convert, } from "./copilot/declarative-agent/DeclarativeAgentManifestV1D4";
export type DeclarativeAgentManifest = DeclarativeAgentManifestV1D0 | DeclarativeAgentManifestV1D2 | DeclarativeAgentManifestV1D3 | DeclarativeAgentManifestV1D4;
export type DeclarativeAgentManifestLatest = DeclarativeAgentManifestV1D4;
export { APIPluginManifestV2D1, Convert as ApiPluginV2D1Convert, } from "./copilot/plugin/ApiPluginManifestV2D1";
export { APIPluginManifestV2D2, Convert as ApiPluginManifestV2D2Convert, } from "./copilot/plugin/ApiPluginManifestV2D2";
export { APIPluginManifestV2D3, Convert as ApiPluginManifestV2D3Convert, } from "./copilot/plugin/ApiPluginManifestV2D3";
export type APIPluginManifest = APIPluginManifestV2D1 | APIPluginManifestV2D2 | APIPluginManifestV2D3;
export type APIPluginManifestLatest = APIPluginManifestV2D3;
export type AppManifest = TeamsManifest | DeclarativeAgentManifest | APIPluginManifest;
export declare class TeamsManifestConverter {
    static jsonToManifest(json: string): TeamsManifest;
    static manifestToJson(manifest: TeamsManifest): string;
}
export declare class DeclarativeAgentManifestConverter {
    static jsonToManifest(json: string): DeclarativeAgentManifest;
    static manifestToJson(manifest: DeclarativeAgentManifest): string;
}
export declare class ApiPluginManifestConverter {
    static jsonToManifest(json: string): APIPluginManifest;
    static manifestToJson(manifest: APIPluginManifest): string;
}
export declare class AppManifestUtils {
    /**
     * Fetch the schema from the manifest object, load from local if the schema is in the package
     * @param manifest
     * @returns manifest schema object
     */
    static fetchSchema(schemaUrl: string): Promise<JSONSchemaType<AppManifest>>;
    static validateAgainstSchema(manifest: AppManifest, schema?: JSONSchemaType<AppManifest>): Promise<string[]>;
    /**
     * Read Teams manifest from file with basic type check
     *
     * @param filePath - Teams manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type assert failure.
     *
     * @returns The manifest Object
     */
    static readTeamsManifest(filePath: string): Promise<TeamsManifest>;
    /**
     * Read declarative agent manifest from file with schema validation
     *
     * @param filePath - Teams manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type check failure.
     *
     * @returns The manifest Object and schema validation results
     */
    static readAndValidateTeamsManifest(filePath: string): Promise<[TeamsManifest, string[]]>;
    /**
     * Read declarative agent manifest from file with basic type check
     *
     * @param filePath - Declarative agent manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type assert failure.
     *
     * @returns The manifest Object
     */
    static readDeclarativeAgentManifest(filePath: string): Promise<DeclarativeAgentManifest>;
    /**
     * Read declarative agent manifest from file with schema validation
     *
     * @param filePath - Declarative agent manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type check failure.
     *
     * @returns The manifest Object and schema validation results
     */
    static readAndValidateDeclarativeAgentManifest(filePath: string): Promise<[DeclarativeAgentManifest, string[]]>;
    /**
     * Read API plugin manifest from file with basic type check
     *
     * @param filePath - API plugin manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type assert failure.
     *
     * @returns The manifest Object
     */
    static readApiPluginManifest(filePath: string): Promise<APIPluginManifest>;
    /**
     * Read API plugin manifest from file with schema validation
     *
     * @param filePath - API plugin manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type check failure.
     *
     * @returns The manifest Object and schema validation results
     */
    static readAndValidateApiPluginManifest(filePath: string): Promise<[APIPluginManifest, string[]]>;
    /**
     * Writes the Teams manifest object to the given file with basic type check.
     *
     * @param path - The manifest file path.
     * @param manifest - Manifest object to be saved
     * @throws Will propagate any error thrown by the fs-extra#writeFile.
     *
     */
    static writeTeamsManifest(filePath: string, manifest: TeamsManifest): Promise<void>;
    /**
     * Writes the declarative agent manifest object to the given file with basic type check.
     *
     * @param path - The manifest file path.
     * @param manifest - Manifest object to be saved
     * @throws Will propagate any error thrown by the fs-extra#writeFile.
     *
     */
    static writeDeclarativeAgentManifest(filePath: string, manifest: DeclarativeAgentManifest): Promise<void>;
    /**
     * Writes the declarative agent manifest object to the given file with basic type check.
     *
     * @param path - The manifest file path.
     * @param manifest - Manifest object to be saved
     * @throws Will propagate any error thrown by the fs-extra#writeFile.
     *
     */
    static writeApiPluginManifest(filePath: string, manifest: APIPluginManifest): Promise<void>;
}
