"use strict";
// To parse this data:
//
//   import { Convert, APIPluginManifestV2D3 } from "./file";
//
//   const aPIPluginManifestV2D3 = Convert.toAPIPluginManifestV2D3(json);
//
// These functions will throw an error if the JSON doesn't
// match the expected interface, even if the JSON is valid.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Convert = void 0;
// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
class Convert {
    static toAPIPluginManifestV2D3(json) {
        return cast(JSON.parse(json), r("APIPluginManifestV2D3"));
    }
    static aPIPluginManifestV2D3ToJson(value) {
        return JSON.stringify(uncast(value, r("APIPluginManifestV2D3")), null, 4);
    }
}
exports.Convert = Convert;
function invalidValue(typ, val, key, parent = '') {
    const prettyTyp = prettyTypeName(typ);
    const parentText = parent ? ` on ${parent}` : '';
    const keyText = key ? ` for key "${key}"` : '';
    throw Error(`Invalid value${keyText}${parentText}. Expected ${prettyTyp} but got ${JSON.stringify(val)}`);
}
function prettyTypeName(typ) {
    if (Array.isArray(typ)) {
        if (typ.length === 2 && typ[0] === undefined) {
            return `an optional ${prettyTypeName(typ[1])}`;
        }
        else {
            return `one of [${typ.map(a => { return prettyTypeName(a); }).join(", ")}]`;
        }
    }
    else if (typeof typ === "object" && typ.literal !== undefined) {
        return typ.literal;
    }
    else {
        return typeof typ;
    }
}
function jsonToJSProps(typ) {
    if (typ.jsonToJS === undefined) {
        const map = {};
        typ.props.forEach((p) => map[p.json] = { key: p.js, typ: p.typ });
        typ.jsonToJS = map;
    }
    return typ.jsonToJS;
}
function jsToJSONProps(typ) {
    if (typ.jsToJSON === undefined) {
        const map = {};
        typ.props.forEach((p) => map[p.js] = { key: p.json, typ: p.typ });
        typ.jsToJSON = map;
    }
    return typ.jsToJSON;
}
function transform(val, typ, getProps, key = '', parent = '') {
    function transformPrimitive(typ, val) {
        if (typeof typ === typeof val)
            return val;
        return invalidValue(typ, val, key, parent);
    }
    function transformUnion(typs, val) {
        // val must validate against one typ in typs
        const l = typs.length;
        for (let i = 0; i < l; i++) {
            const typ = typs[i];
            try {
                return transform(val, typ, getProps);
            }
            catch (_) { }
        }
        return invalidValue(typs, val, key, parent);
    }
    function transformEnum(cases, val) {
        if (cases.indexOf(val) !== -1)
            return val;
        return invalidValue(cases.map(a => { return l(a); }), val, key, parent);
    }
    function transformArray(typ, val) {
        // val must be an array with no invalid elements
        if (!Array.isArray(val))
            return invalidValue(l("array"), val, key, parent);
        return val.map(el => transform(el, typ, getProps));
    }
    function transformDate(val) {
        if (val === null) {
            return null;
        }
        const d = new Date(val);
        if (isNaN(d.valueOf())) {
            return invalidValue(l("Date"), val, key, parent);
        }
        return d;
    }
    function transformObject(props, additional, val) {
        if (val === null || typeof val !== "object" || Array.isArray(val)) {
            return invalidValue(l(ref || "object"), val, key, parent);
        }
        const result = {};
        Object.getOwnPropertyNames(props).forEach(key => {
            const prop = props[key];
            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
            result[prop.key] = transform(v, prop.typ, getProps, key, ref);
        });
        Object.getOwnPropertyNames(val).forEach(key => {
            if (!Object.prototype.hasOwnProperty.call(props, key)) {
                result[key] = transform(val[key], additional, getProps, key, ref);
            }
        });
        return result;
    }
    if (typ === "any")
        return val;
    if (typ === null) {
        if (val === null)
            return val;
        return invalidValue(typ, val, key, parent);
    }
    if (typ === false)
        return invalidValue(typ, val, key, parent);
    let ref = undefined;
    while (typeof typ === "object" && typ.ref !== undefined) {
        ref = typ.ref;
        typ = typeMap[typ.ref];
    }
    if (Array.isArray(typ))
        return transformEnum(typ, val);
    if (typeof typ === "object") {
        return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val)
            : typ.hasOwnProperty("arrayItems") ? transformArray(typ.arrayItems, val)
                : typ.hasOwnProperty("props") ? transformObject(getProps(typ), typ.additional, val)
                    : invalidValue(typ, val, key, parent);
    }
    // Numbers can be parsed by Date but shouldn't be.
    if (typ === Date && typeof val !== "number")
        return transformDate(val);
    return transformPrimitive(typ, val);
}
function cast(val, typ) {
    return transform(val, typ, jsonToJSProps);
}
function uncast(val, typ) {
    return transform(val, typ, jsToJSONProps);
}
function l(typ) {
    return { literal: typ };
}
function a(typ) {
    return { arrayItems: typ };
}
function u(...typs) {
    return { unionMembers: typs };
}
function o(props, additional) {
    return { props, additional };
}
function m(additional) {
    return { props: [], additional };
}
function r(name) {
    return { ref: name };
}
const typeMap = {
    "APIPluginManifestV2D3": o([
        { json: "schema_version", js: "schema_version", typ: r("SchemaVersion") },
        { json: "name_for_human", js: "name_for_human", typ: "" },
        { json: "namespace", js: "namespace", typ: "" },
        { json: "description_for_model", js: "description_for_model", typ: u(undefined, "") },
        { json: "description_for_human", js: "description_for_human", typ: "" },
        { json: "logo_url", js: "logo_url", typ: u(undefined, "any") },
        { json: "contact_email", js: "contact_email", typ: u(undefined, "") },
        { json: "legal_info_url", js: "legal_info_url", typ: u(undefined, "any") },
        { json: "privacy_policy_url", js: "privacy_policy_url", typ: u(undefined, "any") },
        { json: "functions", js: "functions", typ: u(undefined, a(r("FunctionObject"))) },
        { json: "runtimes", js: "runtimes", typ: u(undefined, a(r("APIPluginManifestV2D"))) },
        { json: "capabilities", js: "capabilities", typ: u(undefined, r("PluginCapabilitiesObject")) },
    ], "any"),
    "PluginCapabilitiesObject": o([
        { json: "conversation_starters", js: "conversation_starters", typ: u(undefined, a(r("ConversationStarterObject"))) },
    ], "any"),
    "ConversationStarterObject": o([
        { json: "text", js: "text", typ: "" },
        { json: "title", js: "title", typ: u(undefined, "") },
    ], "any"),
    "FunctionObject": o([
        { json: "id", js: "id", typ: u(undefined, "") },
        { json: "name", js: "name", typ: "" },
        { json: "description", js: "description", typ: u(undefined, "") },
        { json: "parameters", js: "parameters", typ: u(undefined, r("FunctionParametersObject")) },
        { json: "returns", js: "returns", typ: u(undefined, r("ReturnObject")) },
        { json: "states", js: "states", typ: u(undefined, r("FunctionStatesObject")) },
        { json: "capabilities", js: "capabilities", typ: u(undefined, r("FunctionCapabilitiesObject")) },
    ], "any"),
    "FunctionCapabilitiesObject": o([
        { json: "confirmation", js: "confirmation", typ: u(undefined, r("ConfirmationObject")) },
        { json: "response_semantics", js: "response_semantics", typ: u(undefined, r("ResponseSemanticsObject")) },
        { json: "security_info", js: "security_info", typ: u(undefined, r("SecurityInfoObject")) },
    ], "any"),
    "ConfirmationObject": o([
        { json: "type", js: "type", typ: u(undefined, r("ConfirmationType")) },
        { json: "title", js: "title", typ: u(undefined, "") },
        { json: "body", js: "body", typ: u(undefined, "") },
    ], "any"),
    "ResponseSemanticsObject": o([
        { json: "data_path", js: "data_path", typ: "" },
        { json: "properties", js: "properties", typ: u(undefined, r("ResponseSemanticsPropertiesObject")) },
        { json: "static_template", js: "static_template", typ: u(undefined, m("any")) },
        { json: "oauth_card_path", js: "oauth_card_path", typ: u(undefined, "") },
    ], "any"),
    "ResponseSemanticsPropertiesObject": o([
        { json: "title", js: "title", typ: u(undefined, "") },
        { json: "subtitle", js: "subtitle", typ: u(undefined, "") },
        { json: "url", js: "url", typ: u(undefined, "") },
        { json: "thumbnail_url", js: "thumbnail_url", typ: u(undefined, "") },
        { json: "information_protection_label", js: "information_protection_label", typ: u(undefined, "") },
        { json: "template_selector", js: "template_selector", typ: u(undefined, "") },
    ], "any"),
    "SecurityInfoObject": o([
        { json: "data_handling", js: "data_handling", typ: u(undefined, a(r("DataHandling"))) },
    ], "any"),
    "FunctionParametersObject": o([
        { json: "type", js: "type", typ: u(undefined, r("ParametersType")) },
        { json: "properties", js: "properties", typ: m("any") },
        { json: "required", js: "required", typ: u(undefined, a("")) },
    ], "any"),
    "ReturnObject": o([
        { json: "type", js: "type", typ: u(undefined, r("ReturnsType")) },
        { json: "description", js: "description", typ: u(undefined, "") },
        { json: "$ref", js: "$ref", typ: u(undefined, r("Ref")) },
    ], "any"),
    "FunctionStatesObject": o([
        { json: "reasoning", js: "reasoning", typ: u(undefined, r("StateObject")) },
        { json: "responding", js: "responding", typ: u(undefined, r("StateObject")) },
    ], "any"),
    "StateObject": o([
        { json: "description", js: "description", typ: u(undefined, "") },
        { json: "instructions", js: "instructions", typ: u(undefined, u(a(""), "")) },
        { json: "examples", js: "examples", typ: u(undefined, u(a(""), "")) },
    ], "any"),
    "APIPluginManifestV2D": o([
        { json: "type", js: "type", typ: r("RuntimeType") },
        { json: "auth", js: "auth", typ: r("RuntimeAuthenticationObject") },
        { json: "run_for_functions", js: "run_for_functions", typ: u(undefined, a("")) },
        { json: "spec", js: "spec", typ: r("Spec") },
        { json: "output_template", js: "output_template", typ: u(undefined, "") },
    ], false),
    "RuntimeAuthenticationObject": o([
        { json: "type", js: "type", typ: r("TypeEnum") },
        { json: "Type", js: "Type", typ: u(undefined, r("TypeEnum")) },
        { json: "reference_id", js: "reference_id", typ: u(undefined, "") },
    ], false),
    "Spec": o([
        { json: "url", js: "url", typ: u(undefined, "") },
        { json: "api_description", js: "api_description", typ: u(undefined, "") },
        { json: "progress_style", js: "progress_style", typ: u(undefined, r("ProgressStyle")) },
        { json: "local_endpoint", js: "local_endpoint", typ: u(undefined, r("LocalEndpoint")) },
        { json: "allowed_host", js: "allowed_host", typ: u(undefined, r("AllowedHost")) },
    ], false),
    "ConfirmationType": [
        "AdaptiveCard",
        "None",
    ],
    "DataHandling": [
        "DataTransform",
        "GetPrivateData",
        "GetPublicData",
        "ResourceStateUpdate",
    ],
    "ParametersType": [
        "object",
    ],
    "Ref": [
        "https://copilot.microsoft.com/schemas/rich-response-v1.0.json",
    ],
    "ReturnsType": [
        "string",
    ],
    "TypeEnum": [
        "ApiKeyPluginVault",
        "None",
        "OAuthPluginVault",
    ],
    "AllowedHost": [
        "document",
        "mail",
        "presentation",
        "workbook",
    ],
    "LocalEndpoint": [
        "Microsoft.Office.Addin",
    ],
    "ProgressStyle": [
        "None",
        "ShowUsage",
        "ShowUsageWithInput",
        "ShowUsageWithInputAndOutput",
    ],
    "RuntimeType": [
        "LocalPlugin",
        "OpenApi",
    ],
    "SchemaVersion": [
        "v2.3",
    ],
};
//# sourceMappingURL=ApiPluginManifestV2D3.js.map