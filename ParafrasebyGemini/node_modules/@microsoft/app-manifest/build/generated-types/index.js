"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppManifestUtils = exports.ApiPluginManifestConverter = exports.DeclarativeAgentManifestConverter = exports.TeamsManifestConverter = exports.ApiPluginManifestV2D3Convert = exports.ApiPluginManifestV2D2Convert = exports.ApiPluginV2D1Convert = exports.DeclarativeAgentManifestV1D4Convert = exports.DeclarativeAgentManifestV1D3Convert = exports.DeclarativeAgentManifestV1D2Convert = exports.DeclarativeAgentManifestV1D0Convert = exports.TeamsManifestVDevPreviewConvert = exports.TeamsManifestV1D9Convert = exports.TeamsManifestV1D8Convert = exports.TeamsManifestV1D7Convert = exports.TeamsManifestV1D6Convert = exports.TeamsManifestV1D5Convert = exports.TeamsManifestV1D4Convert = exports.TeamsManifestV1D3Convert = exports.TeamsManifestV1D21Convert = exports.TeamsManifestV1D20Convert = exports.TeamsManifestV1D2Convert = exports.TeamsManifestV1D19Convert = exports.TeamsManifestV1D17Convert = exports.TeamsManifestV1D16Convert = exports.TeamsManifestV1D15Convert = exports.TeamsManifestV1D14Convert = exports.TeamsManifestV1D13Convert = exports.TeamsManifestV1D12Convert = exports.TeamsManifestV1D11Convert = exports.TeamsManifestV1D10Convert = exports.TeamsManifestV1D1Convert = void 0;
const ajv_draft_04_1 = __importDefault(require("ajv-draft-04"));
const ajv_formats_1 = __importDefault(require("ajv-formats"));
const _2020_1 = __importDefault(require("ajv/dist/2020"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const DeclarativeAgentManifestV1D0_1 = require("./copilot/declarative-agent/DeclarativeAgentManifestV1D0");
const DeclarativeAgentManifestV1D2_1 = require("./copilot/declarative-agent/DeclarativeAgentManifestV1D2");
const DeclarativeAgentManifestV1D3_1 = require("./copilot/declarative-agent/DeclarativeAgentManifestV1D3");
const DeclarativeAgentManifestV1D4_1 = require("./copilot/declarative-agent/DeclarativeAgentManifestV1D4");
const ApiPluginManifestV2D1_1 = require("./copilot/plugin/ApiPluginManifestV2D1");
const ApiPluginManifestV2D2_1 = require("./copilot/plugin/ApiPluginManifestV2D2");
const ApiPluginManifestV2D3_1 = require("./copilot/plugin/ApiPluginManifestV2D3");
const TeamsManifestV1D1_1 = require("./teams/TeamsManifestV1D1");
const TeamsManifestV1D10_1 = require("./teams/TeamsManifestV1D10");
const TeamsManifestV1D11_1 = require("./teams/TeamsManifestV1D11");
const TeamsManifestV1D12_1 = require("./teams/TeamsManifestV1D12");
const TeamsManifestV1D13_1 = require("./teams/TeamsManifestV1D13");
const TeamsManifestV1D14_1 = require("./teams/TeamsManifestV1D14");
const TeamsManifestV1D15_1 = require("./teams/TeamsManifestV1D15");
const TeamsManifestV1D16_1 = require("./teams/TeamsManifestV1D16");
const TeamsManifestV1D17_1 = require("./teams/TeamsManifestV1D17");
const TeamsManifestV1D19_1 = require("./teams/TeamsManifestV1D19");
const TeamsManifestV1D2_1 = require("./teams/TeamsManifestV1D2");
const TeamsManifestV1D20_1 = require("./teams/TeamsManifestV1D20");
const TeamsManifestV1D21_1 = require("./teams/TeamsManifestV1D21");
const TeamsManifestV1D3_1 = require("./teams/TeamsManifestV1D3");
const TeamsManifestV1D4_1 = require("./teams/TeamsManifestV1D4");
const TeamsManifestV1D5_1 = require("./teams/TeamsManifestV1D5");
const TeamsManifestV1D6_1 = require("./teams/TeamsManifestV1D6");
const TeamsManifestV1D7_1 = require("./teams/TeamsManifestV1D7");
const TeamsManifestV1D8_1 = require("./teams/TeamsManifestV1D8");
const TeamsManifestV1D9_1 = require("./teams/TeamsManifestV1D9");
const TeamsManifestVDevPreview_1 = require("./teams/TeamsManifestVDevPreview");
var TeamsManifestV1D1_2 = require("./teams/TeamsManifestV1D1");
Object.defineProperty(exports, "TeamsManifestV1D1Convert", { enumerable: true, get: function () { return TeamsManifestV1D1_2.Convert; } });
var TeamsManifestV1D10_2 = require("./teams/TeamsManifestV1D10");
Object.defineProperty(exports, "TeamsManifestV1D10Convert", { enumerable: true, get: function () { return TeamsManifestV1D10_2.Convert; } });
var TeamsManifestV1D11_2 = require("./teams/TeamsManifestV1D11");
Object.defineProperty(exports, "TeamsManifestV1D11Convert", { enumerable: true, get: function () { return TeamsManifestV1D11_2.Convert; } });
var TeamsManifestV1D12_2 = require("./teams/TeamsManifestV1D12");
Object.defineProperty(exports, "TeamsManifestV1D12Convert", { enumerable: true, get: function () { return TeamsManifestV1D12_2.Convert; } });
var TeamsManifestV1D13_2 = require("./teams/TeamsManifestV1D13");
Object.defineProperty(exports, "TeamsManifestV1D13Convert", { enumerable: true, get: function () { return TeamsManifestV1D13_2.Convert; } });
var TeamsManifestV1D14_2 = require("./teams/TeamsManifestV1D14");
Object.defineProperty(exports, "TeamsManifestV1D14Convert", { enumerable: true, get: function () { return TeamsManifestV1D14_2.Convert; } });
var TeamsManifestV1D15_2 = require("./teams/TeamsManifestV1D15");
Object.defineProperty(exports, "TeamsManifestV1D15Convert", { enumerable: true, get: function () { return TeamsManifestV1D15_2.Convert; } });
var TeamsManifestV1D16_2 = require("./teams/TeamsManifestV1D16");
Object.defineProperty(exports, "TeamsManifestV1D16Convert", { enumerable: true, get: function () { return TeamsManifestV1D16_2.Convert; } });
var TeamsManifestV1D17_2 = require("./teams/TeamsManifestV1D17");
Object.defineProperty(exports, "TeamsManifestV1D17Convert", { enumerable: true, get: function () { return TeamsManifestV1D17_2.Convert; } });
var TeamsManifestV1D19_2 = require("./teams/TeamsManifestV1D19");
Object.defineProperty(exports, "TeamsManifestV1D19Convert", { enumerable: true, get: function () { return TeamsManifestV1D19_2.Convert; } });
var TeamsManifestV1D2_2 = require("./teams/TeamsManifestV1D2");
Object.defineProperty(exports, "TeamsManifestV1D2Convert", { enumerable: true, get: function () { return TeamsManifestV1D2_2.Convert; } });
var TeamsManifestV1D20_2 = require("./teams/TeamsManifestV1D20");
Object.defineProperty(exports, "TeamsManifestV1D20Convert", { enumerable: true, get: function () { return TeamsManifestV1D20_2.Convert; } });
var TeamsManifestV1D21_2 = require("./teams/TeamsManifestV1D21");
Object.defineProperty(exports, "TeamsManifestV1D21Convert", { enumerable: true, get: function () { return TeamsManifestV1D21_2.Convert; } });
var TeamsManifestV1D3_2 = require("./teams/TeamsManifestV1D3");
Object.defineProperty(exports, "TeamsManifestV1D3Convert", { enumerable: true, get: function () { return TeamsManifestV1D3_2.Convert; } });
var TeamsManifestV1D4_2 = require("./teams/TeamsManifestV1D4");
Object.defineProperty(exports, "TeamsManifestV1D4Convert", { enumerable: true, get: function () { return TeamsManifestV1D4_2.Convert; } });
var TeamsManifestV1D5_2 = require("./teams/TeamsManifestV1D5");
Object.defineProperty(exports, "TeamsManifestV1D5Convert", { enumerable: true, get: function () { return TeamsManifestV1D5_2.Convert; } });
var TeamsManifestV1D6_2 = require("./teams/TeamsManifestV1D6");
Object.defineProperty(exports, "TeamsManifestV1D6Convert", { enumerable: true, get: function () { return TeamsManifestV1D6_2.Convert; } });
var TeamsManifestV1D7_2 = require("./teams/TeamsManifestV1D7");
Object.defineProperty(exports, "TeamsManifestV1D7Convert", { enumerable: true, get: function () { return TeamsManifestV1D7_2.Convert; } });
var TeamsManifestV1D8_2 = require("./teams/TeamsManifestV1D8");
Object.defineProperty(exports, "TeamsManifestV1D8Convert", { enumerable: true, get: function () { return TeamsManifestV1D8_2.Convert; } });
var TeamsManifestV1D9_2 = require("./teams/TeamsManifestV1D9");
Object.defineProperty(exports, "TeamsManifestV1D9Convert", { enumerable: true, get: function () { return TeamsManifestV1D9_2.Convert; } });
var TeamsManifestVDevPreview_2 = require("./teams/TeamsManifestVDevPreview");
Object.defineProperty(exports, "TeamsManifestVDevPreviewConvert", { enumerable: true, get: function () { return TeamsManifestVDevPreview_2.Convert; } });
var DeclarativeAgentManifestV1D0_2 = require("./copilot/declarative-agent/DeclarativeAgentManifestV1D0");
Object.defineProperty(exports, "DeclarativeAgentManifestV1D0Convert", { enumerable: true, get: function () { return DeclarativeAgentManifestV1D0_2.Convert; } });
var DeclarativeAgentManifestV1D2_2 = require("./copilot/declarative-agent/DeclarativeAgentManifestV1D2");
Object.defineProperty(exports, "DeclarativeAgentManifestV1D2Convert", { enumerable: true, get: function () { return DeclarativeAgentManifestV1D2_2.Convert; } });
var DeclarativeAgentManifestV1D3_2 = require("./copilot/declarative-agent/DeclarativeAgentManifestV1D3");
Object.defineProperty(exports, "DeclarativeAgentManifestV1D3Convert", { enumerable: true, get: function () { return DeclarativeAgentManifestV1D3_2.Convert; } });
var DeclarativeAgentManifestV1D4_2 = require("./copilot/declarative-agent/DeclarativeAgentManifestV1D4");
Object.defineProperty(exports, "DeclarativeAgentManifestV1D4Convert", { enumerable: true, get: function () { return DeclarativeAgentManifestV1D4_2.Convert; } });
var ApiPluginManifestV2D1_2 = require("./copilot/plugin/ApiPluginManifestV2D1");
Object.defineProperty(exports, "ApiPluginV2D1Convert", { enumerable: true, get: function () { return ApiPluginManifestV2D1_2.Convert; } });
var ApiPluginManifestV2D2_2 = require("./copilot/plugin/ApiPluginManifestV2D2");
Object.defineProperty(exports, "ApiPluginManifestV2D2Convert", { enumerable: true, get: function () { return ApiPluginManifestV2D2_2.Convert; } });
var ApiPluginManifestV2D3_2 = require("./copilot/plugin/ApiPluginManifestV2D3");
Object.defineProperty(exports, "ApiPluginManifestV2D3Convert", { enumerable: true, get: function () { return ApiPluginManifestV2D3_2.Convert; } });
const TeamsManifestConverterMap = {
    "1.1": [
        TeamsManifestV1D1_1.Convert.toTeamsManifestV1D1,
        TeamsManifestV1D1_1.Convert.teamsManifestV1D1ToJson,
    ],
    "1.2": [
        TeamsManifestV1D2_1.Convert.toTeamsManifestV1D2,
        TeamsManifestV1D2_1.Convert.teamsManifestV1D2ToJson,
    ],
    "1.3": [
        TeamsManifestV1D3_1.Convert.toTeamsManifestV1D3,
        TeamsManifestV1D3_1.Convert.teamsManifestV1D3ToJson,
    ],
    "1.4": [
        TeamsManifestV1D4_1.Convert.toTeamsManifestV1D4,
        TeamsManifestV1D4_1.Convert.teamsManifestV1D4ToJson,
    ],
    "1.5": [
        TeamsManifestV1D5_1.Convert.toTeamsManifestV1D5,
        TeamsManifestV1D5_1.Convert.teamsManifestV1D5ToJson,
    ],
    "1.6": [
        TeamsManifestV1D6_1.Convert.toTeamsManifestV1D6,
        TeamsManifestV1D6_1.Convert.teamsManifestV1D6ToJson,
    ],
    "1.7": [
        TeamsManifestV1D7_1.Convert.toTeamsManifestV1D7,
        TeamsManifestV1D7_1.Convert.teamsManifestV1D7ToJson,
    ],
    "1.8": [
        TeamsManifestV1D8_1.Convert.toTeamsManifestV1D8,
        TeamsManifestV1D8_1.Convert.teamsManifestV1D8ToJson,
    ],
    "1.9": [
        TeamsManifestV1D9_1.Convert.toTeamsManifestV1D9,
        TeamsManifestV1D9_1.Convert.teamsManifestV1D9ToJson,
    ],
    "1.10": [
        TeamsManifestV1D10_1.Convert.toTeamsManifestV1D10,
        TeamsManifestV1D10_1.Convert.teamsManifestV1D10ToJson,
    ],
    "1.11": [
        TeamsManifestV1D11_1.Convert.toTeamsManifestV1D11,
        TeamsManifestV1D11_1.Convert.teamsManifestV1D11ToJson,
    ],
    "1.12": [
        TeamsManifestV1D12_1.Convert.toTeamsManifestV1D12,
        TeamsManifestV1D12_1.Convert.teamsManifestV1D12ToJson,
    ],
    "1.13": [
        TeamsManifestV1D13_1.Convert.toTeamsManifestV1D13,
        TeamsManifestV1D13_1.Convert.teamsManifestV1D13ToJson,
    ],
    "1.14": [
        TeamsManifestV1D14_1.Convert.toTeamsManifestV1D14,
        TeamsManifestV1D14_1.Convert.teamsManifestV1D14ToJson,
    ],
    "1.15": [
        TeamsManifestV1D15_1.Convert.toTeamsManifestV1D15,
        TeamsManifestV1D15_1.Convert.teamsManifestV1D15ToJson,
    ],
    "1.16": [
        TeamsManifestV1D16_1.Convert.toTeamsManifestV1D16,
        TeamsManifestV1D16_1.Convert.teamsManifestV1D16ToJson,
    ],
    "1.17": [
        TeamsManifestV1D17_1.Convert.toTeamsManifestV1D17,
        TeamsManifestV1D17_1.Convert.teamsManifestV1D17ToJson,
    ],
    "1.19": [
        TeamsManifestV1D19_1.Convert.toTeamsManifestV1D19,
        TeamsManifestV1D19_1.Convert.teamsManifestV1D19ToJson,
    ],
    "1.20": [
        TeamsManifestV1D20_1.Convert.toTeamsManifestV1D20,
        TeamsManifestV1D20_1.Convert.teamsManifestV1D20ToJson,
    ],
    "1.21": [
        TeamsManifestV1D21_1.Convert.toTeamsManifestV1D21,
        TeamsManifestV1D21_1.Convert.teamsManifestV1D21ToJson,
    ],
    devPreview: [
        TeamsManifestVDevPreview_1.Convert.toTeamsManifestVDevPreview,
        TeamsManifestVDevPreview_1.Convert.teamsManifestVDevPreviewToJson,
    ],
};
const daConverterMap = {
    "v1.0": [
        DeclarativeAgentManifestV1D0_1.Convert.toDeclarativeAgentManifestV1D0,
        DeclarativeAgentManifestV1D0_1.Convert.declarativeAgentManifestV1D0ToJson,
    ],
    "v1.2": [
        DeclarativeAgentManifestV1D2_1.Convert.toDeclarativeAgentManifestV1D2,
        DeclarativeAgentManifestV1D2_1.Convert.declarativeAgentManifestV1D2ToJson,
    ],
    "v1.3": [
        DeclarativeAgentManifestV1D3_1.Convert.toDeclarativeAgentManifestV1D3,
        DeclarativeAgentManifestV1D3_1.Convert.declarativeAgentManifestV1D3ToJson,
    ],
    "v1.4": [
        DeclarativeAgentManifestV1D4_1.Convert.toDeclarativeAgentManifestV1D4,
        DeclarativeAgentManifestV1D4_1.Convert.declarativeAgentManifestV1D4ToJson,
    ],
};
const ApiPluginConverterMap = {
    "v2.1": [
        ApiPluginManifestV2D1_1.Convert.toAPIPluginManifestV2D1,
        ApiPluginManifestV2D1_1.Convert.aPIPluginManifestV2D1ToJson,
    ],
    "v2.2": [
        ApiPluginManifestV2D2_1.Convert.toAPIPluginManifestV2D2,
        ApiPluginManifestV2D2_1.Convert.aPIPluginManifestV2D2ToJson,
    ],
    "v2.3": [
        ApiPluginManifestV2D3_1.Convert.toAPIPluginManifestV2D3,
        ApiPluginManifestV2D3_1.Convert.aPIPluginManifestV2D3ToJson,
    ],
};
class TeamsManifestConverter {
    static jsonToManifest(json) {
        const parsed = JSON.parse(json);
        const manifestVersion = parsed.manifestVersion;
        const converters = TeamsManifestConverterMap[manifestVersion];
        if (!converters) {
            return parsed;
        }
        return converters[0](json);
    }
    static manifestToJson(manifest) {
        const manifestVersion = manifest.manifestVersion;
        const converters = TeamsManifestConverterMap[manifestVersion];
        if (!converters) {
            return JSON.stringify(manifest);
        }
        return converters[1](manifest);
    }
}
exports.TeamsManifestConverter = TeamsManifestConverter;
class DeclarativeAgentManifestConverter {
    static jsonToManifest(json) {
        const parsed = JSON.parse(json);
        const version = parsed.version;
        const converters = daConverterMap[version];
        if (!converters) {
            return parsed;
        }
        return converters[0](json);
    }
    static manifestToJson(manifest) {
        const version = manifest.version;
        const converters = daConverterMap[version];
        if (!converters) {
            return JSON.stringify(manifest);
        }
        return converters[1](manifest);
    }
}
exports.DeclarativeAgentManifestConverter = DeclarativeAgentManifestConverter;
class ApiPluginManifestConverter {
    static jsonToManifest(json) {
        const parsed = JSON.parse(json);
        const schema_version = parsed.schema_version;
        const converters = ApiPluginConverterMap[schema_version];
        if (!converters) {
            return parsed;
        }
        return converters[0](json);
    }
    static manifestToJson(manifest) {
        const schema_version = manifest.schema_version;
        const converters = ApiPluginConverterMap[schema_version];
        if (!converters) {
            return JSON.stringify(manifest);
        }
        return converters[1](manifest);
    }
}
exports.ApiPluginManifestConverter = ApiPluginManifestConverter;
class AppManifestUtils {
    /**
     * Fetch the schema from the manifest object, load from local if the schema is in the package
     * @param manifest
     * @returns manifest schema object
     */
    static async fetchSchema(schemaUrl) {
        if (schemaUrl.startsWith("https://developer.microsoft.com/json-schemas/teams") ||
            schemaUrl.startsWith("https://developer.microsoft.com/json-schemas/copilot/declarative-agent") ||
            schemaUrl.startsWith("https://developer.microsoft.com/json-schemas/copilot/plugin")) {
            const suffix = schemaUrl.substring("https://developer.microsoft.com/".length);
            const schemaFile = path_1.default.join(__dirname, "..", suffix);
            if (await fs_extra_1.default.pathExists(schemaFile)) {
                const json = await fs_extra_1.default.readJson(schemaFile);
                return json;
            }
        }
        let result;
        try {
            const res = await (0, node_fetch_1.default)(schemaUrl);
            result = (await res.json());
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error(`Failed to get manifest at url ${schemaUrl} due to: ${e.message}`);
            }
            else {
                throw new Error(`Failed to get manifest at url ${schemaUrl} due to: unknown error`);
            }
        }
        return result;
    }
    static async validateAgainstSchema(manifest, schema) {
        var _a;
        if (!schema) {
            const schemaUrl = manifest.$schema;
            if (!schemaUrl) {
                throw new Error("Manifest does not have a $schema property");
            }
            schema = await this.fetchSchema(schemaUrl);
        }
        let validate;
        if ((_a = schema.$schema) === null || _a === void 0 ? void 0 : _a.includes("2020-12")) {
            const ajv = new _2020_1.default({
                //formats: { uri: true, email: true },
                allErrors: true,
                strictTypes: false,
            });
            (0, ajv_formats_1.default)(ajv, ["uri", "email", "regex"]);
            validate = ajv.compile(schema);
        }
        else {
            const ajv = new ajv_draft_04_1.default({
                allErrors: true,
                strictTypes: false,
            });
            (0, ajv_formats_1.default)(ajv, ["uri", "email", "regex"]);
            validate = ajv.compile(schema);
        }
        const valid = validate(manifest);
        if (!valid && validate.errors) {
            return validate.errors.map((error) => `${error.instancePath} ${error.message || ""}. Details: ${error.params ? JSON.stringify(error.params) : ""}`);
        }
        else {
            return [];
        }
    }
    /**
     * Read Teams manifest from file with basic type check
     *
     * @param filePath - Teams manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type assert failure.
     *
     * @returns The manifest Object
     */
    static async readTeamsManifest(filePath) {
        const jsonString = await fs_extra_1.default.readFile(filePath, "utf8");
        const manifest = TeamsManifestConverter.jsonToManifest(jsonString);
        return manifest;
    }
    /**
     * Read declarative agent manifest from file with schema validation
     *
     * @param filePath - Teams manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type check failure.
     *
     * @returns The manifest Object and schema validation results
     */
    static async readAndValidateTeamsManifest(filePath) {
        const manifest = await this.readTeamsManifest(filePath);
        const validateRes = await this.validateAgainstSchema(manifest);
        return [manifest, validateRes];
    }
    /**
     * Read declarative agent manifest from file with basic type check
     *
     * @param filePath - Declarative agent manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type assert failure.
     *
     * @returns The manifest Object
     */
    static async readDeclarativeAgentManifest(filePath) {
        const jsonString = await fs_extra_1.default.readFile(filePath, "utf8");
        const manifest = DeclarativeAgentManifestConverter.jsonToManifest(jsonString);
        return manifest;
    }
    /**
     * Read declarative agent manifest from file with schema validation
     *
     * @param filePath - Declarative agent manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type check failure.
     *
     * @returns The manifest Object and schema validation results
     */
    static async readAndValidateDeclarativeAgentManifest(filePath) {
        const manifest = await this.readDeclarativeAgentManifest(filePath);
        const validateRes = await this.validateAgainstSchema(manifest);
        return [manifest, validateRes];
    }
    /**
     * Read API plugin manifest from file with basic type check
     *
     * @param filePath - API plugin manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type assert failure.
     *
     * @returns The manifest Object
     */
    static async readApiPluginManifest(filePath) {
        const jsonString = await fs_extra_1.default.readFile(filePath, "utf8");
        const manifest = ApiPluginManifestConverter.jsonToManifest(jsonString);
        return manifest;
    }
    /**
     * Read API plugin manifest from file with schema validation
     *
     * @param filePath - API plugin manifest file path.
     * @throws Will propagate any error thrown by the fs-extra#readFile or type check failure.
     *
     * @returns The manifest Object and schema validation results
     */
    static async readAndValidateApiPluginManifest(filePath) {
        const manifest = await this.readApiPluginManifest(filePath);
        const validateRes = await this.validateAgainstSchema(manifest);
        return [manifest, validateRes];
    }
    /**
     * Writes the Teams manifest object to the given file with basic type check.
     *
     * @param path - The manifest file path.
     * @param manifest - Manifest object to be saved
     * @throws Will propagate any error thrown by the fs-extra#writeFile.
     *
     */
    static async writeTeamsManifest(filePath, manifest) {
        const jsonString = TeamsManifestConverter.manifestToJson(manifest);
        return fs_extra_1.default.writeFile(filePath, jsonString, "utf8");
    }
    /**
     * Writes the declarative agent manifest object to the given file with basic type check.
     *
     * @param path - The manifest file path.
     * @param manifest - Manifest object to be saved
     * @throws Will propagate any error thrown by the fs-extra#writeFile.
     *
     */
    static async writeDeclarativeAgentManifest(filePath, manifest) {
        const jsonString = DeclarativeAgentManifestConverter.manifestToJson(manifest);
        return fs_extra_1.default.writeFile(filePath, jsonString, "utf8");
    }
    /**
     * Writes the declarative agent manifest object to the given file with basic type check.
     *
     * @param path - The manifest file path.
     * @param manifest - Manifest object to be saved
     * @throws Will propagate any error thrown by the fs-extra#writeFile.
     *
     */
    static async writeApiPluginManifest(filePath, manifest) {
        const jsonString = ApiPluginManifestConverter.manifestToJson(manifest);
        return fs_extra_1.default.writeFile(filePath, jsonString, "utf8");
    }
}
exports.AppManifestUtils = AppManifestUtils;
//# sourceMappingURL=index.js.map